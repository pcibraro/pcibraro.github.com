<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WCF | Pablo Cibraro (Cibrax)]]></title>
  <link href="http://cibrax.me/blog/categories/wcf/atom.xml" rel="self"/>
  <link href="http://cibrax.me/"/>
  <updated>2014-05-23T15:16:29-03:00</updated>
  <id>http://cibrax.me/</id>
  <author>
    <name><![CDATA[Cibrax]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Contract Projections in WCF declarative services]]></title>
    <link href="http://cibrax.me/blog/2009/02/18/contract-projections-in-wcf-declarative-services/"/>
    <updated>2009-02-18T00:00:00-03:00</updated>
    <id>http://cibrax.me/blog/2009/02/18/contract-projections-in-wcf-declarative-services</id>
    <content type="html"><![CDATA[<p>As my friend Jesus mentioned in the post &ldquo;<a href="http://weblogs.asp.net/gsusx/archive/2008/12/17/using-xaml-serialization-in-wcf-4-0.aspx">Using XAML serialization in
WCF
4.0</a>&rdquo;,
WCF 4.0 introduces a new way to implement services that are totally
defined in XAML, which receive the name of &ldquo;declarative services&rdquo;. In
the past, creating a simple service involved three basic steps,</p>

<ol>
<li>Define the service contract</li>
<li>Implement the service contract</li>
<li>Host the service implementation</li>
</ol>


<p>#1 and #2 were all done in an imperative .NET programming language
such as C# or VB.NET. Today, thanks to this new feature, we will able
to define the service interface (#1) using XAML and implement the
service (#2) using a declarative workflow (XAML too).</p>

<p>This was announced as part of the Microsoft&rsquo;s Oslo modeling vision in
the last PDC.</p>

<p>Aaron Skonnard has recently written an excellent article for the MSDN,
&ldquo;WCF and WF Services in the .NET framework 4.0, and Dublin&rdquo;, where he
discusses all these new features more in detail, and the role of dublin
in that vision. Something I found interesting in that article was the
fact that he mentioned &ldquo;Contract Projections&rdquo; as part of &ldquo;declarative
services&rdquo;.</p>

<p>A contract projection allows separating the logical contract definition
from the representation of the messages that are sent or received. We
will able to have a single contract definition and specify different
messaging styles like &ldquo;SOAP&rdquo; or &ldquo;REST/POX&rdquo; using a contract projection.</p>

<p>As in the example shown in the article, a regular WCF service definition
for a calculator service made in C# would look like this,</p>

<p>~~~~ {#ctl00_mainContentContainer_ctl15 .libCScode style=&ldquo;WORD-BREAK: break-all; WORD-WRAP: break-word&rdquo; space=&ldquo;preserve&rdquo;}
[ServiceContract]
public interface ICalculator
{</p>

<pre><code>[OperationContract]
int Add(int Op1, int Op2);
[OperationContract]
int Subtract(int Op1, int Op2);
</code></pre>

<p>};
~~~~</p>

<p>The equivalent representation in XAML (using declarative services) would
look like this,</p>

<p>~~~~ {#ctl00_mainContentContainer_ctl16 .libCScode style=&ldquo;WORD-BREAK: break-all; WORD-WRAP: break-word&rdquo; space=&ldquo;preserve&rdquo;}
<ServiceContract Name="ICalculator"></p>

<pre><code>&lt;OperationContract Name="Add"&gt;
    &lt;OperationArgument Name="Op1" Type="p:Int32" /&gt;
    &lt;OperationArgument Name="Op2" Type="p:Int32" /&gt;
    &lt;OperationArgument Direction="Out" Name="res1" Type="p:Int32" /&gt;
</code></pre>

<p>   </OperationContract>
   <OperationContract Name="Subtract"></p>

<pre><code>    &lt;OperationArgument Name="Op3" Type="p:Int32" /&gt;
    &lt;OperationArgument Name="Op4" Type="p:Int32" /&gt;
    &lt;OperationArgument Direction="Out" Name="res2" Type="p:Int32" /&gt;
</code></pre>

<p>   </OperationContract>
</ServiceContract>
~~~~</p>

<p>And finally, the projection of that contract at wire level like SOAP,</p>

<p>~~~~ {#ctl00_mainContentContainer_ctl17 .libCScode style=&ldquo;WORD-BREAK: break-all; WORD-WRAP: break-word&rdquo; space=&ldquo;preserve&rdquo;}
&lt;Service.KnownProjections></p>

<pre><code>&lt;SoapContractProjection Name="ICalculatorSoapProjection"&gt;
    &lt;!-- service contract definition goes here --&gt;
&lt;/SoapContractProjection&gt;
</code></pre>

<p>&lt;/Service.KnownProjections>
~~~~</p>

<p>As you can see, we will able to have a single service implementation (or
XAML workflow), and multiple contract projections or &ldquo;KnownProjections&rdquo;
(for the different messaging styles) to get access to that service.</p>

<p>With this new feature, it looks like REST/POX will be officially
supported for consuming declarative services. (I talked in <a href="http://weblogs.asp.net/cibrax/archive/2008/10/24/rest-and-workflow-services-play-well-together.aspx">the
past</a>
about exposing workflow services with REST).</p>

<p>As part of the PDC bits (The code that was distributed in a VPC), there
is a interface &ldquo;IContractProjection&rdquo; for defining new kind of
projections,</p>

<p>public interface IContractProjection \
{ \
    // Methods \
    void ApplyEndpointBehavior(ServiceEndpoint endpoint); \
    ContractDescription GetContractDescription();</p>

<p>    // Properties \
    string ConfigurationName { get; } \
    ServiceContract Contract { get; set; } \
}</p>

<p>For the moment, there is single implementation for Soap,
&ldquo;SoapContractProjection&rdquo;. I do not know, we will see if the WCF/WF team
provide more implementations in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WCF Workflow services in business applications]]></title>
    <link href="http://cibrax.me/blog/2008/12/03/wcf-workflow-services-in-business-applications/"/>
    <updated>2008-12-03T00:00:00-03:00</updated>
    <id>http://cibrax.me/blog/2008/12/03/wcf-workflow-services-in-business-applications</id>
    <content type="html"><![CDATA[<p>It&rsquo;s pretty interesting to see how useful workflow services can be
sometimes, specially for business applications that require
orchestrating several back-end services calls.</p>

<p>As one of the programmers involved in the development of the WS-I Sample
application for .NET, an application that demonstrates  how to build
interoperable web services in .NET using the WS-I Basic Profile 1.0
(Each vendor in the WS-I working group basically implemented the same
application using its development platform, more information can be
found
<a href="http://www.ws-i.org/deliverables/workinggroup.aspx?wg=sampleapps">here</a>),
it was a surprise to me to find another implementation as part of the
WCF SDK, made this time all declaratively through WCF workflow services
and just a few activities. To give you an idea, the original version of
the same application took us some days and hundred lines of code just to
have something complete and working.</p>

<p>The SDK version is available under the folder, [SDK
Folder]\WCF_WF_CardSpace_Samples\WCF\Scenario\WorkflowServices\Conversations</p>

<p>Workflow services, initially introduced in WCF 3.5 with the Receive and
Send activities, will now take a very important role as part of the Oslo
vision. We will have the opportunity to write pure declarative
long-running services with XAML, including all the WCF contracts for
receiving/sending messages. This will make possible to store the
complete workflow representation in the Oslo repository, and take later
full control of this workflow&rsquo;s instances from Dublin, the new hosting
environment for long-running services. David Chappell has written an
excellent article about WF 4.0, Dublin the oslo vision, you can find it
<a href="http://www.davidchappell.com/blog/2008/11/first-look-at-wf-40-dublin-and-oslo.html">here</a>,
this a must read for developers interested in this area.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WCF - Issue with Secure Conversation in Web farms]]></title>
    <link href="http://cibrax.me/blog/2008/07/29/wcf-issue-with-secure-conversation-in-web-farms/"/>
    <updated>2008-07-29T00:00:00-03:00</updated>
    <id>http://cibrax.me/blog/2008/07/29/wcf-issue-with-secure-conversation-in-web-farms</id>
    <content type="html"><![CDATA[<p>While I was working for one of my customers, we ran into a very strange
problem when they tried to deploy some WCF services in a web farm using
cookie sessions (In order to enable secure conversation in this kind of
scenario, cookies must be used to track the state of the Secure
Conversation Tokens).</p>

<p>At some point, we start receiving a random exception with the following
message,</p>

<p><strong><em>System.ServiceModel.Security.MessageSecurityException: Message
security verification failed. &mdash;&ndash;&gt; System.Xml.XmlException: There was
an error deserializing the security token XML. Please see the inner
exception for more details. &mdash;&ndash;&gt; System.ArgumentException: The
SecurityContextSecurityToken with
context-id=urn:uuid:502e208e-8db2-4814-8623-d3050273e875 (no key
generation-id) has expired</em></strong></p>

<p>Later, we found out that a time skew setting was not supported in WCF
for the SCT cookies, and the error was happening because of an slight
difference in time between the servers in the farm.</p>

<p>Fortunately, <a href="http://blogs.msdn.com/brentschmaltz">Brent Schmaltz</a> has
made public a hot fix for that problem in his blog. You can find the
complete solution and a better description of the problem in <a href="http://blogs.msdn.com/brentschmaltz/archive/2008/06/20/cookie-sessions-and-wcf.aspx">this
post</a>.</p>

<p>Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Streaming large content with WCF and deferred execution]]></title>
    <link href="http://cibrax.me/blog/2008/06/10/streaming-large-content-with-wcf-and-deferred-execution/"/>
    <updated>2008-06-10T00:00:00-03:00</updated>
    <id>http://cibrax.me/blog/2008/06/10/streaming-large-content-with-wcf-and-deferred-execution</id>
    <content type="html"><![CDATA[<p>I will use this post to discuss an scenario that you may run into while
working with WCF, a service that returns a lot of objects (Or large
data) to the client applications. This scenario is not about
transferring files, that is a completely different story, and I already
discussed it some time ago in another post.</p>

<p>The scalability of the service&rsquo;s host may be affected if the service is
not well designed or configured. WCF will use large memory buffers to
keep the complete message before it start sending that message through
the wire.</p>

<p>Using data contracts or XML serializable classes in this scenario does
not scale well because the complete object graph has to be loaded in
memory before the corresponding serializer (Data Contract serializer or
Xml Serializer) transform it into an stream of bytes.</p>

<p>In addition, if the service throttling settings are not configured
carefully for that service, a large number of requests will practically
consume all the available resources (If that happens, the server will
stop processing additional requests and you may run into a OutOfMemory
exception as well). For more information about Service Throttling, I
recommend this <a href="http://kennyw.com/indigo/150">Kenny Wolf&rsquo;s post</a>.</p>

<p>Before getting into the streaming solution, which looks very complex at
first glance, you should consider refactoring your service&rsquo;s API to
support data paging. If you use paging, the design of the final service
will be simpler and you should not have any of the mentioned problems.
What&rsquo;s more, streaming does not work well with message security, the
default behavior for WCF is to buffer all messages when message security
is set for the channel. In order to combine message security with
streaming you should use the Chunking Channel.</p>

<p>Data Paging design sample,</p>

<p>[XmlRoot(&ldquo;Customer&rdquo;)]</p>

<p>public class Customer</p>

<p>{</p>

<p>  public string FirstName { get; set; }</p>

<p> </p>

<p>  public string LastName { get; set; }</p>

<p> </p>

<p>  public string Address { get; set; }</p>

<p>}</p>

<p> </p>

<p>[XmlRoot(&ldquo;Customers&rdquo;)]</p>

<p>public class Customers</p>

<p>{</p>

<p>    public Customer[] Customers { get; set; }</p>

<p>}</p>

<p> </p>

<p>public interface ISampleService</p>

<p>{</p>

<p>  [OperationContract]</p>

<p>  Customers GetAllCustomers(int page, int count, out int
totalCustomers); </p>

<p>}</p>

<p>The client application will have to call that method as many times as it
needs to retrieve all the customers. The service should have a limit in
the number of customers it can return per call, otherwise, we will have
the same problems if the client application asks for a large number of
customers.</p>

<p>Deferred execution is a cool feature introduced in .NET 2.0 for
enumerations. Basically the enumeration does not happen until some
calling code wants to examine the enumeration.</p>

<p>Let&rsquo;s discuss now how deferred execution can be achieved in WCF with the
help of the streaming model.</p>

<p>​1. The first extensibility point that we will need for this solution is
a custom BodyWriter class. A BodyWriter has the knowledge to serialize
an entire object graph as xml into the body of a soap message. The class
Message has an static method to create a new message from a  BodyWriter
instance.</p>

<p>public abstract class Message : &hellip;.</p>

<p>{</p>

<p>    public static Message CreateMessage(MessageVersion version, string
action, BodyWriter body)</p>

<p>}</p>

<p>The &ldquo;BodyWriter&rdquo; class is an abstract and contains a single method to
serialize the complete object graph into the soap body.</p>

<p>public class CustomBodyWriter : BodyWriter</p>

<p>  {</p>

<p>    private IEnumerable&lt;Customer> customers;</p>

<p> </p>

<p>    public CustomBodyWriter(IEnumerable&lt;Customer> customers)</p>

<p>      : base(false) // False should be passed here to avoid buffering
the message</p>

<p>    {</p>

<p>      this.customers = customers;</p>

<p>    }</p>

<p> </p>

<p>    protected override void
OnWriteBodyContents(System.Xml.XmlDictionaryWriter writer)</p>

<p>    {</p>

<p>      XmlSerializer serializer = new XmlSerializer(typeof(Customer));</p>

<p>      writer.WriteStartElement(&ldquo;customers&rdquo;);</p>

<p>      foreach (Customer customer in customers)</p>

<p>      {</p>

<p>        serializer.Serialize(writer, customer);</p>

<p>      }</p>

<p>      writer.WriteEndElement();</p>

<p>    }</p>

<p>  }</p>

<p>As you can see in the code above, our custom implementation of the
&ldquo;OnWriteBodyContents&rdquo; receives an enumeration of objects that we want to
serialize into the message. A &ldquo;false&rdquo; value is passed as argument in the
constructor to the base class to specify that our custom implementation
can not be buffered.</p>

<p>​2. We will use deferred execution to retrieve all the customers from
the database (The following code actually emulates that),</p>

<p>public IEnumerable&lt;Customer> GetAllCustomersImpl()</p>

<p>{</p>

<p>   for(long i = 0; i &lt; 1000; i++) //All the customers should be read
from the database</p>

<p>   {</p>

<p>      yield return new Customer { FirstName = &ldquo;Foo&rdquo;, LastName = &ldquo;Bar&rdquo;,
Address = &ldquo;FooBar 123&rdquo; };</p>

<p>   }</p>

<p> </p>

<p>   yield break;</p>

<p>}</p>

<p>What&rsquo;s it is important here is that we are not returning all the
customer objects at the same time (we are returning one at time, so they
are not loaded in memory) using the &ldquo;yield&rdquo; operator.</p>

<p>​3. The service implementation returns a new message created from the
custom &ldquo;CustomBodyWriter&rdquo; class.</p>

<p>public class SampleService : ISampleService</p>

<p>  {</p>

<p>    #region ISampleService Members</p>

<p> </p>

<p>    public Message GetAllCustomers()</p>

<p>    {</p>

<p>      Message message = Message.CreateMessage(MessageVersion.Soap11,
&ldquo;GetAllCustomers&rdquo;, new CustomBodyWriter(GetAllCustomersImpl()));</p>

<p>      return message;</p>

<p>    }</p>

<p> </p>

<p>    #endregion</p>

<p>    </p>

<p>  }</p>

<p> </p>

<p>The first two arguments of the CreateMessage method specifies the soap
version and soap action for the response message.</p>

<p>​4. The client application also reads one customer object at time from
the response message,</p>

<p>static IEnumerable&lt;Customer> GetAllCustomers(Message message)</p>

<p>{</p>

<p>  XmlReader reader = message.GetReaderAtBodyContents();</p>

<p>  if (reader.LocalName != &ldquo;customers&rdquo;)</p>

<p>  {</p>

<p>     throw new Exception(&ldquo;The service returned an invalid message&rdquo;);</p>

<p>  }</p>

<p> </p>

<p>  XmlSerializer serializer = new XmlSerializer(typeof(Customer));</p>

<p>  reader.ReadStartElement(&ldquo;customers&rdquo;);</p>

<p> </p>

<p>  while(!reader.EOF &amp;&amp; reader.LocalName == &ldquo;Customer&rdquo;)</p>

<p>  {</p>

<p>     Customer customer = (Customer)serializer.Deserialize(reader);</p>

<p>     yield return customer;</p>

<p>  }</p>

<p> </p>

<p>  reader.ReadEndElement();</p>

<p>}</p>

<p>​5. Finally, the client and the service, both have to be configured to
use an &ldquo;streamed&rdquo; as transfer mode. Otherwise, all the messages will be
buffered in memory.</p>

<p>&lt;basicHttpBinding></p>

<p>   &lt;binding name=&ldquo;basic&rdquo; transferMode=&ldquo;StreamedResponse&rdquo;
maxReceivedMessageSize=&ldquo;10000000&rdquo;></p>

<p>      &lt;security mode=&ldquo;None&rdquo;>&lt;/security></p>

<p>   &lt;/binding></p>

<p>&lt;/basicHttpBinding></p>

<p>The &ldquo;maxReceivedMessageSize&rdquo; setting is also important because it limits
the amount of data that the service can return. You should adjust it to
a value according to the amount of data you might return in the service
implementation.</p>

<p>You can download the complete sample from this
<a href="/images/legacy/StreamingObjects.zip">location</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authenticating users with Supporting Tokens in WCF - Binding Extension]]></title>
    <link href="http://cibrax.me/blog/2008/03/26/authenticating-users-with-supporting-tokens-in-wcf-binding-extension/"/>
    <updated>2008-03-26T00:00:00-03:00</updated>
    <id>http://cibrax.me/blog/2008/03/26/authenticating-users-with-supporting-tokens-in-wcf-binding-extension</id>
    <content type="html"><![CDATA[<p>A couple of months ago I described a useful authentication pattern for
Web applications based on supporting tokens, one of features provided by
WCF. After that, Dominick Baier wrote  a nice and intuitive
<a href="http://www.leastprivilege.com/UserNameSupportingTokenInWCF.aspx">article</a>
showing this pattern in practice with real code examples, something I
could not include in my last post for time reasons :(.</p>

<p>A bad thing about supporting tokens is that they can only be configured
through code, there is no configuration support for this, which it means
that the security binding element has to be modified at some point to
include the supporting token requirements on the client and service side
(e.g, token type, encryption and signature requirements). If IIS is
being used as service host, this will eventually require a custom
service factory just to plug in those requirements. </p>

<p>Fortunately, WCF supports configuration extension points to allow
developers to extend specific points of the configuration schema and
object model.</p>

<p>The &lt;extensions> section provides a centralized location for the
registration of custom configuration objects required for creating a
relatively open extensibility point to the WCF configuration system. 
Each configuration extensibility point connects to one of three
collections within this section:  behaviorExtensions,
bindingElementExtensions, and bindingExtensions.</p>

<p>A really good thing about the configuration extensions is that the
developer does not have use any custom code like custom proxies or
service factories to load those security settings (All that work is done
by the extensions).</p>

<p>During this post I will show how to write a custom binding extension to
specify supporting token requirements for an endpoint through
configuration. This sample will be specific to the web application
scenario described by the pattern.</p>

<p>Let&rsquo;s first discuss the configuration schema we want to have for the
client and the service side. What we initially need is a custom binding
to support the mutual X509 authentication scenario,</p>

<p>&lt;customBinding></p>

<p>  &lt;binding name=&ldquo;MutualCertificateBinding&rdquo;></p>

<p>    &lt;security authenticationMode=&ldquo;MutualCertificate&rdquo;/></p>

<p>    &lt;httpTransport/></p>

<p>  &lt;/binding></p>

<p>&lt;/customBinding></p>

<p>Simple enough, this binding should be configured on the client and
service side. Secondly, we have to specify the X509 certificates that
will be used as client and service credentials for this binding.</p>

<p>On the client side, those credentials are specified by means of a
endpoint behavior,</p>

<p>&lt;behavior name=&ldquo;ClientBehavior&rdquo;></p>

<p>  &lt;clientCredentials></p>

<p>    &lt;serviceCertificate></p>

<p>       &lt;defaultCertificate findValue=&ldquo;CN=SampleService&rdquo;
storeLocation=&ldquo;LocalMachine&rdquo; storeName=&ldquo;My&rdquo;
x509FindType=&ldquo;FindBySubjectDistinguishedName&rdquo;/></p>

<p>       &lt;authentication revocationMode=&ldquo;NoCheck&rdquo;
certificateValidationMode=&ldquo;None&rdquo;>&lt;/authentication></p>

<p>    &lt;/serviceCertificate>   &lt;/clientCredentials></p>

<p>&lt;/behavior></p>

<p>The equivalent configuration settings will be set  on the server side,
the same binding and a service behavior to specify the service
certificate.</p>

<p>&lt;behavior name=&ldquo;ServiceBehavior&rdquo;></p>

<p>  &lt;serviceCredentials></p>

<p>    &lt;serviceCertificate findValue=&ldquo;CN=SampleService&rdquo;
storeLocation=&ldquo;LocalMachine&rdquo; storeName=&ldquo;My&rdquo;
x509FindType=&ldquo;FindBySubjectDistinguishedName&rdquo;/></p>

<p>    &lt;clientCertificate></p>

<p>      &lt;authentication revocationMode=&ldquo;NoCheck&rdquo;/></p>

<p>    &lt;/clientCertificate></p>

<p>  &lt;/serviceCredentials> &lt;/behavior></p>

<p>Once we have these standard configuration, the next step is to add the
custom extension (On both sides, the client and the service) and
reference the existing &ldquo;MutualCertificate&rdquo; binding from there (The one
that we previously defined). The custom extension will basically add the
supporting token requirements to that binding.</p>

<p>&lt;extensions>     &lt;bindingExtensions>           &lt;add
name=&ldquo;trustedWeb&rdquo; type=&ldquo;Samples.TrustedWeb, Samples&rdquo;/>    
&lt;/bindingExtensions></p>

<p>&lt;/extensions></p>

<p>&lt;bindings></p>

<p>    &lt;trustedWeb></p>

<p>     &lt;binding name=&ldquo;MyTrustedWeb" 
bindingReference="MutualCertificateBinding&rdquo; /></p>

<p>    &lt;/trustedWeb></p>

<p>    &lt;customBinding></p>

<p>      &lt;binding name=&ldquo;MutualCertificateBinding&rdquo;></p>

<p>        &lt;security authenticationMode=&ldquo;MutualCertificate&rdquo;/></p>

<p>        &lt;httpTransport/></p>

<p>      &lt;/binding></p>

<p>    &lt;/customBinding></p>

<p>&lt;/bindings></p>

<p>The client and service will have to use this binding instead of the
original mutual certificate binding (The one configured in the
originalBinding attribute).</p>

<p>Client configuration:</p>

<p>&lt;client></p>

<p>  &lt;endpoint address=&ldquo;<a href="http://localhost/SampleService/Service.svc">http://localhost/SampleService/Service.svc</a>&rdquo;</p>

<p>    binding=&ldquo;trustedWeb&rdquo; bindingConfiguration=&ldquo;MyTrustedWeb&rdquo;
behaviorConfiguration=&ldquo;ClientBehavior&rdquo;</p>

<p>   contract=&ldquo;Client.ISampleService&rdquo;></p>

<p>  &lt;/endpoint></p>

<p>&lt;/client></p>

<p>Service configuration:</p>

<p> &lt;services></p>

<p>   &lt;service name=&ldquo;SampleService&rdquo;
behaviorConfiguration=&ldquo;ServiceBehavior&rdquo;></p>

<p>     &lt;endpoint binding=&ldquo;trustedWeb&rdquo; address=&ldquo;&rdquo;
bindingConfiguration=&ldquo;MyTrustedWeb&rdquo; contract=&ldquo;ISampleService&rdquo;></p>

<p>&lt;/endpoint></p>

<p>&lt;/service></p>

<p>&lt;/services></p>

<p>The trustedWeb custom extension performs two things:</p>

<p>​1. Load the binding referenced by the attribute &ldquo;bindingReference&rdquo;</p>

<p>protected override void OnApplyConfiguration(Binding binding)</p>

<p>{</p>

<p>  TrustedWebClientBinding trustedWebClient =
(TrustedWebClientBinding)binding;</p>

<p>  BindingsSection bindings =
(BindingsSection)ConfigurationManager.GetSection(&ldquo;system.serviceModel/bindings&rdquo;);</p>

<p>  if (bindings == null)</p>

<p>  {</p>

<p>    throw new ConfigurationErrorsException(&ldquo;Unexisting bindings
section&rdquo;);</p>

<p>  }</p>

<p> 
if(!bindings.CustomBinding.Bindings.ContainsKey(this.BindingReference))</p>

<p>    throw new ConfigurationErrorsException(string.Format(&ldquo;Unexisting
binding configuration {0}&rdquo;, this.BindingReference));</p>

<p>  CustomBindingElement element =
bindings.CustomBinding.Bindings[this.BindingReference];</p>

<p>  trustedWebClient.Binding = new CustomBinding();</p>

<p>  element.ApplyConfiguration(trustedWebClient.Binding);</p>

<p>}</p>

<p>​2. Creates the binding elements used by the referenced binding and adds
the Supporting tokens requirements for an username.</p>

<p>public override BindingElementCollection CreateBindingElements()</p>

<p>{</p>

<p>    return AddUserNameSupportingTokenToBinding(Binding);</p>

<p>}</p>

<p>private BindingElementCollection
AddUserNameSupportingTokenToBinding(Binding binding)</p>

<p>{</p>

<p>  BindingElementCollection elements = binding.CreateBindingElements();</p>

<p>  SecurityBindingElement security =
elements.Find&lt;SecurityBindingElement>();</p>

<p>  if (security != null)</p>

<p>  {</p>

<p>    UserNameSecurityTokenParameters tokenParameters = new
UserNameSecurityTokenParameters();</p>

<p>    tokenParameters.InclusionMode =
SecurityTokenInclusionMode.AlwaysToRecipient;</p>

<p>    tokenParameters.RequireDerivedKeys = false;</p>

<p>   
security.EndpointSupportingTokenParameters.SignedEncrypted.Add(tokenParameters);</p>

<p>    return elements;</p>

<p>  }</p>

<p>  throw new ArgumentException(&ldquo;Unexisting security binding element&rdquo;);</p>

<p>}</p>

<p>The complete code is available to download from
<a href="/images/legacy/TrustedWeb.zip">here</a>.</p>
]]></content>
  </entry>
  
</feed>
