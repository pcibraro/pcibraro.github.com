<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webapi | Pablo Cibraro (Cibrax)]]></title>
  <link href="http://cibrax.me/blog/categories/webapi/atom.xml" rel="self"/>
  <link href="http://cibrax.me/"/>
  <updated>2014-01-31T14:52:57-03:00</updated>
  <id>http://cibrax.me/</id>
  <author>
    <name><![CDATA[Cibrax]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making ajax calls with Hawk authentication to ASP.NET Web API]]></title>
    <link href="http://cibrax.me/blog/2014/01/31/making-ajax-calls-with-hawk-authentication-to-asp-dot-net-web-api/"/>
    <updated>2014-01-31T14:14:00-03:00</updated>
    <id>http://cibrax.me/blog/2014/01/31/making-ajax-calls-with-hawk-authentication-to-asp-dot-net-web-api</id>
    <content type="html"><![CDATA[<p>Hawk is an authentication protocol initially written by Eran Hammer in javascript for being used in Node.js. Later on, Eran also added support for browsers through a browser.js library, which is also part of the <a href="https://github.com/hueniverse/hawk">hawk github project</a>.</p>

<p>As part of this post, I will show how you can use that browser.js library to make Ajax calls to a ASP.NET Web API that authenticates the calls with Hawk.</p>

<p>The first thing is to define the Web API to call from javascript. For the sake of simplicity, we will use a very simple &ldquo;Hello World&rdquo; controller that returns the name of the authenticated user.</p>

<p>```csharp
public class HelloWorldController : ApiController
{
  public string Get()
  {</p>

<pre><code>return "hello " + this.User.Identity.Name;
</code></pre>

<p>  }
}
```</p>

<p>As second step, we will configure the Hawk filter globally to authenticate the calls. This filter is part of the HawkNet integration project with Web API.</p>

<p>```csharp
public static void Register(HttpConfiguration config)
{
  config.Filters.Add(new RequiresHawkAttribute((id) =>
  {</p>

<pre><code>return new HawkCredential
{
  Id = "dh37fgj492je",
  Key = "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn",
  Algorithm = "hmacsha256",
  User = "steve"
};
</code></pre>

<p>  }));
}
```</p>

<p>Once we have the Web API configured, we will write the javascript to make the call, which will use browser.js to generate the hawk header on the client.</p>

<p>```html</p>

<script src="~/Scripts/browser.js"></script>


<script>
$(function () {
    var url = 'http://localhost:28290/api/HelloWorld';

    var credentials = {
        id: 'dh37fgj492je', // Required by Hawk.client.header
        key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',
        algorithm: 'sha256',
        user: 'Steve'
    };

    $("#helloworld").click(function() {
                
        var header = hawk.client.header(url, 'GET', { credentials: credentials });

        $.ajax({
            dataType: "json",
            headers: { authorization: header.field },
            url: url,
            success: function (error, response, body) {
                
                $("#response").html(body.responseText);
            }
        });
    });
});
</script>


<p>```</p>

<p>As you can see, the part that matters in the sample above is how you generate the hawk header by calling the &ldquo;header&rdquo; method in the client object provided by the browser.js library. That method receives the url, the http method and the credentials. The result of that call is the hawk authentication header, which is attached to the authorization header in the ajax call.</p>

<p>The complete sample can be found in the <a href="https://github.com/pcibraro/hawknet/tree/master/Example.Web">HawkNet github project</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Testing Improvements in ASP.NET Web API]]></title>
    <link href="http://cibrax.me/blog/2013/09/27/unit-testing-improvements-in-asp-dot-net-web-api/"/>
    <updated>2013-09-27T12:46:00-03:00</updated>
    <id>http://cibrax.me/blog/2013/09/27/unit-testing-improvements-in-asp-dot-net-web-api</id>
    <content type="html"><![CDATA[<p>A time ago I discussed some serious issues in ASP.NET Web API for testing controllers that were using the Request or UrlHelper instances because those required a valid HttpConfiguration instance. You could initialize the HttpConfiguration instace, but that required a lot of work and some ugly code as part of your tests.</p>

<p>The following method in a controller works to describe the problem,</p>

<p><code>csharp
public HttpResponseMessage Post(User model)
{
  var response = Request.CreateResponse(HttpStatusCode.Created, user);
  var link = Url.Link("DefaultApi", new { id = id, controller = "Users" });
  response.Headers.Location = new Uri(link);
  return response;
}
</code></p>

<p>The Request propery is being used to generate a content negotiated response, and the Url property to infer the new location for the resource. If you use ASP.NET Web API as it is today, you will have to write a lot of custom code to initialize the configuration instance as it is shown below.</p>

<p>```csharp
var controller = new UserController();
controller.Configuration = new HttpConfiguration();
var route = controller.Configuration.Routes.MapHttpRoute(</p>

<pre><code>     name: "DefaultApi",
     routeTemplate: "api/{controller}/{id}",
     defaults: new { id = RouteParameter.Optional }
</code></pre>

<p>);
var routeData = new HttpRouteData(route,</p>

<pre><code>   new HttpRouteValueDictionary 
   { 
      { "id", "1" },
      { "controller", "Users" } 
   }
</code></pre>

<p>);
controller.Request = new HttpRequestMessage(HttpMethod.Post,
  &ldquo;<a href="http://localhost:9091/">http://localhost:9091/</a>&rdquo;);
controller.Request.Properties
  .Add(HttpPropertyKeys.HttpConfigurationKey, controller.Configuration);
controller.Request.Properties
  .Add(HttpPropertyKeys.HttpRouteDataKey, routeData);
```</p>

<p>Glenn Block wrote a very nice extension as part of the Web API Contrib project for making this configuration much more simpler. This extension is available here, <a href="https://github.com/WebApiContrib/WebAPIContrib/blob/master/src/WebApiContrib.Testing/ApiControllerExtensions.cs.">https://github.com/WebApiContrib/WebAPIContrib/blob/master/src/WebApiContrib.Testing/ApiControllerExtensions.cs.</a></p>

<p>However, we can left all this in the past with the new ASP.NET Web API vNext release. The introduction of the IHttpActionResult interface (Equivalent to ActionResult in ASP.NET MVC) has simplified a lot the unit testing story for controllers. A controller method can return now an implementation of IHttpActionResult, which internally uses the Request or the UrlHelper for link generation, so the unit test only cares about the returned IHttpActionResult instance.</p>

<p>The following code shows the same controller method using an instance of IHttpActionResult.</p>

<p>```csharp
public CreatedAtRouteNegotiatedContentResult<UserModel> Post(UserModel user)
{
  user.Id = 1;</p>

<p>  var result = new CreatedAtRouteNegotiatedContentResult<UserModel>(</p>

<pre><code>"DefaultApi",
  new Dictionary&lt;string, object&gt; { { "id", user.Id } },
  user,
  this);
</code></pre>

<p>  return result;
}
```</p>

<p>CreatedAtRouteNegotiatedContentResult is an implementation also included in the framework for handling this scenario. A new resource is created and the location is set in the response message.</p>

<p>The code for the unit test is much simpler too.</p>

<p>```csharp
[TestMethod]
public void ShouldCreateUser()
{</p>

<pre><code>var controller = new UserController();
var result = controller.Post(new UserModel { Name = "foo" });

Assert.IsInstanceOfType(result.Content, typeof(UserModel));
Assert.IsNotNull(result);
</code></pre>

<p>}
```</p>

<p>The UrlHelper class has also been modified to make most of its methods virtual, so they can be mocked or overriden as part of an unit test. You can use this in case you still need to rely on the Url instance in the controller. For example, if you have a controller method like this one.</p>

<p>```csharp
public HttpResponseMessage Post(UserModel user)
{
  user.Id = 1;</p>

<p>  var response = new HttpResponseMessage(HttpStatusCode.Created);
  var link = Url.Link(&ldquo;DefaultApi&rdquo;,</p>

<pre><code>new { id = user.Id, controller = "User" });
</code></pre>

<p>  response.Headers.Location = new Uri(link);</p>

<p>  return response;
}
```</p>

<p>You can create a custom class that derives from UrlHelper and overrides the Link method.</p>

<p>```csharp
[TestMethod]
public void ShouldCreateUser()
{
  var controller = new UserController();
  controller.Url = new MyUrlHelper();</p>

<p>  var result = controller.Post(</p>

<pre><code>new UserModel { Name = "foo" });
</code></pre>

<p>  Assert.IsNotNull(result);
}</p>

<p>public class MyUrlHelper : UrlHelper
{
  public override string Link(string routeName, object routeValues)
  {</p>

<pre><code>return "http://example.com/user/1";
</code></pre>

<p>  }
}
```</p>
]]></content>
  </entry>
  
</feed>
