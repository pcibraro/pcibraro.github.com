<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Federation | Pablo Cibraro (Cibrax)]]></title>
  <link href="http://cibrax.me/blog/categories/federation/atom.xml" rel="self"/>
  <link href="http://cibrax.me/"/>
  <updated>2014-01-31T14:43:01-03:00</updated>
  <id>http://cibrax.me/</id>
  <author>
    <name><![CDATA[Cibrax]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brokered authentication for REST active clients with SAML]]></title>
    <link href="http://cibrax.me/blog/2009/03/06/brokered-authentication-for-rest-active-clients-with-saml/"/>
    <updated>2009-03-06T00:00:00-03:00</updated>
    <id>http://cibrax.me/blog/2009/03/06/brokered-authentication-for-rest-active-clients-with-saml</id>
    <content type="html"><![CDATA[<p>I have been thinking for a while about what could be a good way to
support brokered authentication for active REST clients. Something I did
not want to do was to force the use of WS-Trust Active profile, which is
in essence SOAP based.</p>

<p>Some of the qualities attributes that are easy to reach with REST
services, such as simplicity, interoperability and scalability can
definitely be affected with the introduction of a additional SOAP stack
for negotiating an identity token. WS-Trust passive requestor profile,
on the other hand, was designed for dumb clients like web browsers,
clients that do not have capabilities to handle cryptographic materials
or the SOAP stack itself.  This profile basically hides most of the
WS-Trust details from client applications through a sequence of http
redirections, which could be helpful in this scenario for negotiating a
token and still keep simple REST clients. However, as some user
interaction is required, this profile is not suitable for consuming REST
services from desktop applications or other active client applications.</p>

<p>If we take a deep look at the functionality provided by a Secure Token
Service (STS), it is not more than a service that handle the lifecycle
of a identity token, it knows how to issue a token, renew it or finally
cancel it when it is not longer need it.  If we see all these scenarios
from a point of view of REST, an identity token is just a resource,
something that can be created, updated or even deleted. Of course, there
is not any spec available yet for this scenario, all I will show here is
just an possible implementation of a Restful STS.</p>

<p>The mapping of supported Ws-Trust actions to http verbs for my Restful
STS is defined below,</p>

<ul>
<li>Issue = POST, creates or issues a new token resource (A SAML token)</li>
<li>Renew = PUT, renew an existing token</li>
<li>Cancel = DELETE, cancel an existing token</li>
<li>GET, gets an existing token (There is not such thing in Ws-Trust)</li>
</ul>


<p>I leave out the &ldquo;Validate&rdquo; action as part of this implementation.</p>

<p>What I have created for this example is a REST facade layered on top of
a STS implementation with the Geneva Framework. The definition of
service contract for this Restful STS for supporting that mapping should
look like this,</p>

<p><del> {.c# name=&ldquo;code&rdquo;}
[ServiceContract]public interface IRestSts{    [OperationContract]    [WebInvoke(UriTemplate=&ldquo;Tokens&rdquo;, Method=&ldquo;POST&rdquo;, RequestFormat=WebMessageFormat.Xml, ResponseFormat=WebMessageFormat.Xml)]    RequestSecurityTokenResponse IssueToken(RequestSecurityToken request);     [OperationContract]    [WebInvoke(Method = &ldquo;PUT&rdquo;, UriTemplate = &ldquo;Tokens/{tokenId}&rdquo;, RequestFormat = WebMessageFormat.Xml, ResponseFormat = WebMessageFormat.Xml)]    RequestSecurityTokenResponse RenewToken(string tokenId);     [OperationContract]    [WebInvoke(Method = &ldquo;DELETE&rdquo;, UriTemplate = &ldquo;Tokens/{tokenId}&rdquo;, RequestFormat = WebMessageFormat.Xml, ResponseFormat = WebMessageFormat.Xml)]    void CancelToken(string tokenId);     [OperationContract]    [WebGet(UriTemplate = &ldquo;Tokens/{tokenId}&rdquo;, RequestFormat = WebMessageFormat.Xml, ResponseFormat = WebMessageFormat.Xml)]    RequestSecurityTokenResponse GetToken(string tokenId);    }
</del></p>

<p>As I mentioned before, the client has to first acquire a token from the
STS, that can be done with a regular Http POST containing a
RequestSecurityToken message.</p>

<p><a href="/images/legacy/FederatedidentityinRESTservices_A72D/Issue_REST.gif"><img src="/images/legacy/FederatedidentityinRESTservices_A72D/Issue_REST_thumb.gif" alt="Issue_REST" /></a></p>

<p>The message embedded in the request body to the STS looks like this,</p>

<p>~~~~ {.xml name=&ldquo;code&rdquo;}
<RequestSecurityToken xmlns="http://schemas.xmlsoap.org/ws/2005/02/trust"></p>

<pre><code>&lt;AppliesTo&gt;https://localhost/MyService&lt;/AppliesTo&gt;
&lt;TokenType&gt;http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1&lt;/TokenType&gt;
</code></pre>

<p></RequestSecurityToken>
~~~~</p>

<p>And the corresponding response like this,</p>

<p>~~~~ {.xml name=&ldquo;code&rdquo;}
<RequestSecurityTokenResponse xmlns="http://schemas.xmlsoap.org/ws/2005/02/trust" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"></p>

<pre><code>&lt;Links&gt;
    &lt;Link&gt;
        &lt;href&gt;http://localhost:7362/STSWindows/Service.svc/_8a6fc87b-7e6a-45c9-a479-20ea42113e40&lt;/href&gt;
        &lt;rel&gt;self&lt;/rel&gt;
        &lt;type&gt;application/xml&lt;/type&gt;
    &lt;/Link&gt;
&lt;/Links&gt;
&lt;RequestedSecurityToken&gt;....&lt;/RequestedSecurityToken&gt;
&lt;TokenType&gt;http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1&lt;/TokenType&gt;
</code></pre>

<p></RequestSecurityTokenResponse>
~~~~</p>

<p>Both calls, the first one to get the token from the STS, and the second
call to invoke the service in the Relying party should be protected with
transport security to avoid any middle in the man attack.</p>

<p>In this sample, the STS is using basic authentication to authenticate
the user trying to get access to the token. If the authentication
succeed, the STS implemented with Geneva will provide the necessary
claims associated with that user.</p>

<p>The code on the client side to ask for a new token is quite simple,</p>

<p>static string GetToken(string address, string appliesTo, string
username, string password)</p>

<p>{</p>

<p>    RequestSecurityToken request = new RequestSecurityToken</p>

<p>    {</p>

<p>        TokenType =
&ldquo;<a href="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1">http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1</a>&rdquo;,</p>

<p>        AppliesTo = appliesTo</p>

<p>    };</p>

<p>    DataContractSerializer requestSerializer = new
DataContractSerializer(typeof(RequestSecurityToken));</p>

<p>    WebRequest webRequest = HttpWebRequest.Create(address);</p>

<p>    webRequest.Method = &ldquo;POST&rdquo;;</p>

<p>    webRequest.ContentType = &ldquo;application/xml&rdquo;;</p>

<p>    webRequest.Credentials = new NetworkCredential(username, password);</p>

<p>    using (var st = webRequest.GetRequestStream())</p>

<p>    {</p>

<p>        requestSerializer.WriteObject(st, request);</p>

<p>        st.Flush();</p>

<p>    }</p>

<p>    WebResponse webResponse = webRequest.GetResponse();</p>

<p>    DataContractSerializer responseSerializer = new
DataContractSerializer(typeof(RequestSecurityTokenResponse));</p>

<p>    using (var st = webResponse.GetResponseStream())</p>

<p>    {</p>

<p>        var response =
(RequestSecurityTokenResponse)responseSerializer.ReadObject(st);</p>

<p>        return response.RequestedSecurityToken;</p>

<p>    }</p>

<p>}</p>

<p>It creates a new RequestSecurityToken message, provides the user
credentials and post that information to the STS. The response from the
STS is a RequestSecurityTokenResponse containing the issued token,
that&rsquo;s what this method returns in response.RequestedSecurityToken.</p>

<p>Once the client gets the issued token from the response, it can include
it as part of the request message to the relying party&rsquo;s service. For
this sample, I decided to include the token in the &ldquo;Authorization&rdquo;
header, which is a common mechanism to attach authentication credentials
in a request message to a REST service (Basic authentication, and other
authentication mechanisms use the same approach).</p>

<p>WebRequest webRequest = HttpWebRequest.Create(address);</p>

<p>webRequest.Method = &ldquo;GET&rdquo;;</p>

<p>webRequest.Headers[&ldquo;Authorization&rdquo;] = token;</p>

<p>Now, the hard part, the Relying Party needs a way to parse the token and
authenticate the user before calling the service implementation.
Fortunately, the guys from the WCF REST Starter kit have provide an
excellent solution for this kind of scenarios, message interceptors.
What I did here was to implement a message interceptor for SAML tokens,
which internally used the Geneva Framework for performing all the
validations and parsing the token.  An easy way to inject message
interceptors in a service implementation is through a custom service
factory (Zero config deployment),</p>

<p>class AppServiceHostFactory : ServiceHostFactory</p>

<p>{</p>

<p>    protected override ServiceHost CreateServiceHost(Type serviceType,
Uri[] baseAddresses)</p>

<p>    {</p>

<p>        WebServiceHost2 result = new WebServiceHost2(serviceType, true,
baseAddresses);</p>

<p>        result.Interceptors.Add(new
MessageInterceptors.SamlAuthenticationInterceptor(new
TrustedIssuerNameRegistry()));</p>

<p>        return result;</p>

<p>    }</p>

<p>}</p>

<p>The &ldquo;TrustedIssuerNameRegistry&rdquo; is a just a simple implementation of a
Geneva &ldquo;IssuerNameRegistry&rdquo; provider that validates the issuer of the
SAML token.</p>

<p>All this stuff is of course transparent to the service implementation,
it only receives a bunch of claims representing the user identity. Those
claims can be got accessed through the current user principal. In the
code below, the service generates a feed with all the received claims.</p>

<p>IClaimsIdentity identity =
(IClaimsIdentity)Thread.CurrentPrincipal.Identity;</p>

<p>var feed = new SyndicationFeed()</p>

<p>{</p>

<p>    Id = &ldquo;<a href="http://Claims">http://Claims</a>&rdquo;,</p>

<p>    Title = new TextSyndicationContent(&ldquo;My claims&rdquo;),</p>

<p>};</p>

<p>feed.Items = identity.Claims.Select(c =></p>

<p>    new SyndicationItem()</p>

<p>    {</p>

<p>        Id = Guid.NewGuid().ToString(),</p>

<p>        Title = new TextSyndicationContent(c.ClaimType),</p>

<p>        LastUpdatedTime = DateTime.UtcNow,</p>

<p>        Authors =</p>

<p>            {</p>

<p>                new SyndicationPerson()</p>

<p>                {</p>

<p>                    Name = c.Issuer</p>

<p>                }</p>

<p>            },</p>

<p>        Content = new TextSyndicationContent(c.Value)</p>

<p>    }</p>

<p>);</p>

<p>The complete sample is available to download from
<a href="/images/legacy/FederatedRest.zip">here</a>. Note, it uses
the latest Geneva Framework bits (And also the X509 certificates
included with the samples, just run the certificate setup file included
with the framework).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some thoughts on Portable STS (P-STS) and Geneva Cardspace]]></title>
    <link href="http://cibrax.me/blog/2009/02/02/some-thoughts-on-portable-sts-p-sts-and-geneva-cardspace/"/>
    <updated>2009-02-02T00:00:00-03:00</updated>
    <id>http://cibrax.me/blog/2009/02/02/some-thoughts-on-portable-sts-p-sts-and-geneva-cardspace</id>
    <content type="html"><![CDATA[<p>The other day and friend of mine asked me about portable STS
implementations, if I knew about any available solution that he could
use on his company. That reminded me of a conversation I had like two
years ago with another developer working on custom .NET CLR framework
version for portable devices (like smartcards). As part of that project,
his team was also working on a TCP/IP communication stack for the
device, and a http handler for accepting raw WS-TRUST messages. One goal
for that project was to have a P-STS that could be interoperable with
WCF. The idea seemed very promising at time.</p>

<p>So, what is a PSTS after all ?. In a few words, it is a service running
on a portable device that exposes WS-TRUST endpoints and can issue
security tokens of any kind (e.g, SAML tokens).</p>

<p>Making a search today on
<a href="http://www.google.com.ar/search?hl=en&amp;q=Portable+Security+Token+Service">google</a>
will drop several P-STS products or solutions,  some of them also claim
to be interoperable with WCF and Microsoft Cardspace V1.</p>

<p>In terms of identity management, A P-STS really makes a great different
over existing authentication mechanisms like username/password, X509
certificates or any other kind of two-factor authentication device. Most
of these authentication mechanisms are widely accepted and used today in
applications within corporate environments or applications that requires
off-line support. However, sometimes they lack of a truly identity
support, which means that they do not represent the user identity at all
in the context of those applications, they are just a way of identifying
returning users, or they are hard to extend with additional user&rsquo;s
identity claims.</p>

<p>I can not deny that X509 certificates have demonstrated to be a very
effective and secure way to authenticate users. In addition, X509
certificates can be extended with some custom attributes, the space is
limited, but at least there is a possibility. However, X509 certificates
represent hard tokens, the claims stored on a certificate can not be
changed once it has been issued. Therefore, they are a good solution as
long as their information do not change frequently over a period of
time.</p>

<p>Issue tokens (e.g SAML tokens) on other hand are more dynamic and
cheaper to create. They usually have a short expiration time, they can
issued and used  on the fly, but what is more important, they can carry
custom information or claims about the subject it has been issued for.</p>

<p>Some good news is that the Geneva Cardspace team has also announced some
support for roaming scenarios in Cardspace V2. There will be a way to
store our identity cards on a device (or somewhere in the cloud), which
will be great to combine with a P-STS, no need to export/import the
cards anymore. This scenario was not possible in Cardspace V1, and <a href="http://blogs.msdn.com/vbertocci/archive/2008/01/27/on-the-idea-of-portable-sts-p-sts.aspx">here
is the
explanation</a>.
According to what Rich Randall mentioned in the PDC talk &ldquo;BB44 Identity:
Windows CardSpace "Geneva&rdquo; Under the Hood &ldquo;, the future Cardspace
interface could look as follow,</p>

<p> <img src="/images/legacy/Infocard.jpg" alt="" /></p>

<p> </p>

<p>As you can see, it will not be long until we have complete and portable
identity solutions for roaming scenarios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Claims negotiation between a consumer, STS and Relying Party in WCF]]></title>
    <link href="http://cibrax.me/blog/2009/01/28/claims-negotiation-between-a-consumer-sts-and-relying-party-in-wcf/"/>
    <updated>2009-01-28T00:00:00-03:00</updated>
    <id>http://cibrax.me/blog/2009/01/28/claims-negotiation-between-a-consumer-sts-and-relying-party-in-wcf</id>
    <content type="html"><![CDATA[<p>According to the WS-Trust specification, a service consumer has a way to
negotiate or ask for specific claims to the STS. Those claims (or some
of them) will be generally used by  the service implementation running
on the relying party.</p>

<p>They are negotiated through an &ldquo;claims&rdquo; element in the RST message,</p>

<p>&lt;wst:RequestSecurityToken xmlns:wst=&ldquo;&hellip;&rdquo;></p>

<p>        &lt;wst:TokenType>&hellip;&lt;/wst:TokenType></p>

<p>        &lt;wst:RequestType>&hellip;&lt;/wst:RequestType></p>

<p>        &hellip;</p>

<p>        &lt;wsp:AppliesTo>&hellip;&lt;/wsp:AppliesTo></p>

<p>        <strong>&lt;wst:Claims Dialect=&ldquo;&hellip;&rdquo;>&hellip;&lt;/wst:Claims></strong></p>

<p>        &lt;wst:Entropy></p>

<p>              &lt;wst:BinarySecret>&hellip;&lt;/wst:BinarySecret></p>

<p>         &lt;/wst:Entropy></p>

<p>        &lt;wst:Lifetime></p>

<p>            &lt;wsu:Created>&hellip;&lt;/wsu:Created></p>

<p>            &lt;wsu:Expires>&hellip;&lt;/wsu:Expires></p>

<p>        &lt;/wst:Lifetime></p>

<p>&lt;/wst:RequestSecurityToken></p>

<p><em>The &ldquo;wst:claims&rdquo; is an optional element for requesting a specific set
of claims. Typically, this element contains required and/or optional
claim information identified in a service&rsquo;s policy.</em></p>

<p>Based on these facts, we can elaborate some possible scenarios for
claims negotiation between these three parties.</p>

<p>​1. <strong>No negotiation at all</strong></p>

<p>The STS might just ignore these claims requirements in the RST message
and always returns a fixed claim set according to the consumer identity,
or the service might not express what claims it expects at all. This
scenario might be suitable for a local STS in small-sized or
medium-sized organizations, where the IT department has a complete
control over the client applications and services that interact with
that STS. This kind of solution is easier to implement, and quite rigid
too, a change in the claims required by the service will also require
changes in the STS implementation. As you see, this solution does not
scale at all for a high number of applications or relying party
services.</p>

<p>Many of the STS examples you will find today are implemented like this.</p>

<p>​2. <strong>Negotiation based on the AppliesTo header</strong>.</p>

<p>This solution present a subtle difference with the one discussed before,
the claims vary according the relying party that will make use of them.
The STS ignores the claims requirements in the RST messages and returns
a claim set based on the received AppliesTo header. An existing
agreement must exist between the STS and the relying party, which will
include in addition to the key for encrypting the tokens, a number of
expected claims.  Again, easy to implement, difficult to scale up.</p>

<p>​3. <strong>Manual negotiation based on the &ldquo;Claims&rdquo; header</strong>.</p>

<p>In this scenario, the consumer sends the expected claims in the &ldquo;claims&rdquo;
header and the STS makes use of them for generating the resulting token.
However, the negotiation of those claims between the consumer and the
relying party is manual, a previous agreement must exist, the service
does not express those requirements through metadata. This means that
the claims are hard-coded during development in the client
configuration.  If the service requires additional claims, only the
client configuration will have to be changed, the STS does not have to
be touched at all.</p>

<p>If you are implementing a custom STS with the latest Microsoft Geneva
bits, there is a property &ldquo;Claims&rdquo; in the RequestSecurityToken for
getting access to these values.</p>

<p>protected override IClaimsIdentity
GetOutputClaimsIdentity(IClaimsPrincipal principal, RequestSecurityToken
request, Scope scope)</p>

<p>{</p>

<p>    IClaimsIdentity outputIdentity = new ClaimsIdentity();</p>

<p> </p>

<p>    foreach (Claim claim in request.Claims)</p>

<p>    {</p>

<p>        //Do something&hellip;</p>

<p> </p>

<p>        outputIdentity.Claims.Add(&hellip;);</p>

<p>    }</p>

<p> </p>

<p>    return outputIdentity;</p>

<p>}</p>

<p>The client can specify those claims through configuration as well,</p>

<p>&lt;wsFederationHttpBinding></p>

<p>  &lt;binding name=&ldquo;ServiceBinding&rdquo;></p>

<p>    &lt;security mode=&ldquo;Message&rdquo;></p>

<p>      &lt;message
issuedTokenType=&ldquo;<a href="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1">http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1</a>&rdquo;
negotiateServiceCredential=&ldquo;false&rdquo;></p>

<p>        &lt;claimTypeRequirements></p>

<p>          &lt;add claimType
=&ldquo;<a href="http://schemas.microsoft.com/ws/2005/05/identity/claims/EmailAddress">http://schemas.microsoft.com/ws/2005/05/identity/claims/EmailAddress</a>&rdquo;/></p>

<p>          &lt;add claimType
=&ldquo;<a href="http://schemas.microsoft.com/ws/2005/05/identity/claims/GivenName">http://schemas.microsoft.com/ws/2005/05/identity/claims/GivenName</a>&rdquo;/></p>

<p>          &lt;add claimType
=&ldquo;<a href="http://schemas.microsoft.com/ws/2005/05/identity/claims/Surname">http://schemas.microsoft.com/ws/2005/05/identity/claims/Surname</a>&rdquo;
isOptional =&ldquo;true&rdquo;/></p>

<p>        &lt;/claimTypeRequirements></p>

<p>        &lt;issuer>&lt;/issuer></p>

<p>      &lt;/message></p>

<p>    &lt;/security></p>

<p>  &lt;/binding></p>

<p>&lt;/wsFederationHttpBinding></p>

<p>Once they are added to the binding configuration, WCF will automatically
include them as part of the RST message to the STS.</p>

<p>​4. <strong>Automatic negotiation based on the &ldquo;Claims&rdquo; header</strong>.</p>

<p>This is by far the best solution we can find. The three parties
automatically negotiates the claims at runtime,</p>

<ol type="a">
<li>The service exposes the claim requirements through metadata
(WS-Policy)</li>
</ol>


<p>​II. The client acquires the service&rsquo;s policy and requirements using
some mechanism that could be WS-MetatadaExchange.  Later,  the client
includes some claim requirements into the RST message that will be send
to the STS.</p>

<p>​III. The STS extracts those requirements from the RST message, and
then, it makes use of them for generating the resulting token.</p>

<p>The Cardspace identity selector on the consumer side works like this. It
first detects what claims are needed by the Relying Party, and then,
displays all the possible cards (From different Identity providers) that
satisfy those requirements to the user.</p>

<p>Exposing the claim requirements on the relying party through WCF is
equivalent to do it on the client side (same binding configuration),</p>

<p>&lt;wsFederationHttpBinding></p>

<p>  &lt;binding name=&ldquo;ServiceBinding&rdquo;></p>

<p>    &lt;security mode=&ldquo;Message&rdquo;></p>

<p>      &lt;message
issuedTokenType=&ldquo;<a href="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1">http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1</a>&rdquo;></p>

<p>        &lt;claimTypeRequirements></p>

<p>          &lt;add claimType
=&ldquo;<a href="http://schemas.microsoft.com/ws/2005/05/identity/claims/EmailAddress">http://schemas.microsoft.com/ws/2005/05/identity/claims/EmailAddress</a>&rdquo;/></p>

<p>          &lt;add claimType
=&ldquo;<a href="http://schemas.microsoft.com/ws/2005/05/identity/claims/GivenName">http://schemas.microsoft.com/ws/2005/05/identity/claims/GivenName</a>&rdquo;/></p>

<p>          &lt;add claimType
=&ldquo;<a href="http://schemas.microsoft.com/ws/2005/05/identity/claims/Surname">http://schemas.microsoft.com/ws/2005/05/identity/claims/Surname</a>&rdquo;
isOptional =&ldquo;true&rdquo;/></p>

<p>        &lt;/claimTypeRequirements></p>

<p>        &lt;issuer>&lt;/issuer></p>

<p>      &lt;/message></p>

<p>    &lt;/security></p>

<p>  &lt;/binding></p>

<p>&lt;/wsFederationHttpBinding></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Federation Over TCP With WCF]]></title>
    <link href="http://cibrax.me/blog/2008/04/21/federation-over-tcp-with-wcf/"/>
    <updated>2008-04-21T00:00:00-03:00</updated>
    <id>http://cibrax.me/blog/2008/04/21/federation-over-tcp-with-wcf</id>
    <content type="html"><![CDATA[<p>One of the discussions that we had during the last summit with the rest
of &ldquo;Connected Systems&rdquo; MVPs was the possibility of supporting a
Federation Scenario over TCP in WCF. For many of us that scenario was
possible in theory, but unfortunately no documentation or samples
existed to support it. In fact, WCF only comes with pre-built binding
for federation scenarios, the &ldquo;WsFederationHttpBinding&rdquo; binding, which
is completely tied to Http.</p>

<p>For that reason, I decided to give it a shot and try to manipulate some
custom bindings to use tcp instead of the common used http transport.
One curios thing about TCP is that it requires security sessions
(SecureConversation with requireSecurityContextCancellation equals to
&ldquo;True&rdquo;) in order to work fine. If you do not configure the binding with
those security settings, WCF will throw a nice error message saying that
the order of the binding elements is not correct. At the beginning I did
not configure it in that way, and it took me sometime to figure out what
the problem was, I would save some time with a better error
description. </p>

<p>The resulting bindings for client, STS and the sample service were the
following (In this sample, the client is authenticating against the
service with a client certificate).</p>

<p>​1. Client</p>

<p>&lt;bindings></p>

<p>  &lt;customBinding></p>

<p>    &lt;binding name=&ldquo;STSBinding&rdquo;></p>

<p>      &lt;security authenticationMode=&ldquo;SecureConversation&rdquo;
requireSecurityContextCancellation=&ldquo;true&rdquo;></p>

<p>        &lt;secureConversationBootstrap
authenticationMode=&ldquo;MutualCertificate&rdquo;/></p>

<p>      &lt;/security></p>

<p>      &lt;binaryMessageEncoding/></p>

<p>      &lt;tcpTransport /></p>

<p>    &lt;/binding></p>

<p>    &lt;binding name=&ldquo;ServiceBinding&rdquo;></p>

<p>       &lt;security authenticationMode=&ldquo;SecureConversation&rdquo;></p>

<p>         &lt;secureConversationBootstrap
authenticationMode=&ldquo;IssuedToken&rdquo;></p>

<p>           &lt;issuedTokenParameters
tokenType=<a href="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1">http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1</a>></p>

<p>             &lt;issuer address=&ldquo;net.tcp://localhost:8000/sts&rdquo;
bindingConfiguration=&ldquo;STSBinding&rdquo; binding=&ldquo;customBinding&rdquo;></p>

<p>               &lt;identity></p>

<p>                 &lt;dns value=&ldquo;STSAuthority&rdquo;/> &lt;!&mdash;Sample Cert for the
STS &mdash;></p>

<p>               &lt;/identity></p>

<p>             &lt;/issuer></p>

<p>           &lt;/issuedTokenParameters></p>

<p>        &lt;/secureConversationBootstrap></p>

<p>      &lt;/security></p>

<p>      &lt;binaryMessageEncoding/></p>

<p>      &lt;tcpTransport /></p>

<p>    &lt;/binding></p>

<p>  &lt;/customBinding></p>

<p>&lt;/bindings></p>

<p>​2. STS</p>

<p>&lt;bindings></p>

<p>  &lt;customBinding></p>

<p>    &lt;binding name=&ldquo;MutualCertificateBinding&rdquo;></p>

<p>      &lt;security authenticationMode=&ldquo;SecureConversation&rdquo;
requireSecurityContextCancellation=&ldquo;true&rdquo;></p>

<p>        &lt;secureConversationBootstrap
authenticationMode=&ldquo;MutualCertificate&rdquo;/></p>

<p>      &lt;/security></p>

<p>      &lt;binaryMessageEncoding/></p>

<p>      &lt;tcpTransport /></p>

<p>    &lt;/binding>    &lt;/customBinding></p>

<p>&lt;/bindings></p>

<p>​3. Sample Service</p>

<p>&lt;bindings></p>

<p>  &lt;customBinding></p>

<p>    &lt;binding name=&ldquo;SampleService&rdquo;></p>

<p>      &lt;security authenticationMode=&ldquo;SecureConversation&rdquo;
requireSecurityContextCancellation=&ldquo;true&rdquo;></p>

<p>        &lt;secureConversationBootstrap authenticationMode=&ldquo;IssuedToken&rdquo;></p>

<p>           &lt;issuedTokenParameters
tokenType=<a href="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1">http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1</a>></p>

<p>        &lt;/issuedTokenParameters></p>

<p>       &lt;/secureConversationBootstrap></p>

<p>     &lt;/security></p>

<p>     &lt;binaryMessageEncoding/></p>

<p>    &lt;tcpTransport /></p>

<p>   &lt;/binding></p>

<p>  &lt;/customBinding></p>

<p>&lt;/bindings></p>

<p>It is not required that the STS and service use both TCP transport for
communicating with the client, which is a cool thing because now we can
combine different transports in a whole federation scenario. For
instance, we can have a Http communication between the client and the
STS, and a TCP communication with between the client and the final
service.</p>

<p>The complete sample is available to download from
<a href="/images/legacy/FederationOverTcp.zip">here</a>.</p>

<p> </p>
]]></content>
  </entry>
  
</feed>
